Metadata-Version: 2.1
Name: deelogeny_m2
Version: 0.1
Summary: Learning-based analysis of the realism of phylogenetic simulation methods
Author: Master Bioinfo@Lyon
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: biopython>=1.84
Requires-Dist: numpy>=1.24.0
Requires-Dist: pandas>=2.2.0
Requires-Dist: matplotlib>=3.9.0
Requires-Dist: scipy>=1.14.0
Requires-Dist: plotly>=5.24.0
Requires-Dist: tqdm>=4.67.0

# Learning-based analysis of the realism of phylogenetic simulation methods.

## Table of contents

- [Introduction](#introduction)
  - [Context](#context)
  - [Aims of this project](#aims-of-this-project)
  - [Dataset description](#dataset-description)
- [Tools](#tools)
  - [Simulators](#simulators)
    - [ESM SImulator](#esm_simulator)
    - [Bppseqgen simulator](#bppseqgen_simulator)
  - [Classifier](#classifier)
    - [Logistic regression](#logistic_regression)
    - [DenseMSA](#dense_msa)
    - [CNN aa &amp; nt](#cnn)
- [Environment setup](#environment_setup)
- [Pipeline](#Pipeline)
  - [Preliminary Analysis](#preliminary-analysis)
  - [Generation of phylogenetic trees](#generation-of-the-trees)
  - [Generation of simulated sequences](#sequence_simulation)
  - [Classification of sequences &amp; Evaluation of classifiers](#classification-of-sequences_&_classifieur_evaluation)
- [Results](#results)
- [Challenges](#challenges)
- [Conclusion](#conclusion)
- [Contributors and Contacts](#contributors-and-contacts)
- [Ressources](#ressources)
- [References](#references)

---

## Introduction

### Context

Molecular phylogenetics aims to reconstruct the evolutionary history of current genetic sequences. Since the 1970s, advancements in computing have enabled increasingly sophisticated methods to infer reliable phylogenies.

However, assessing the quality of reconstructed phylogenies remains a significant challenge. Phylogenetic inference attempts to reconstruct a past that no longer exists, making direct validation of these reconstructions impossible. To address this, researchers simulate the evolution of sequences along known trees under controlled conditions and evaluate whether inference methods can accurately reconstruct these trees.

Simulations also play a key role in training artificial intelligence-based phylogenetic reconstruction methods [[1]](https://doi.org/10.1101/2024.06.17.599404). Yet, whether used to evaluate inference quality or train new approaches, the realism of simulated sequences is critical.
Unfortunately, alignments generated by current simulation tools are far from realistic. Simple compositional analyses can often distinguish simulated alignments from real ones [[2]](https://doi.org/10.1093/molbev/msad277).

### Aims of this project

As part of the ANR Deelogeny project, new simulation methods are being developed to generate more realistic data. This approach focuses on two key goals:

- Creating a classifier capable of distinguishing simulated datasets from real ones.
- Refining simulation tools until the classifier can no longer differentiate between simulated and real sequences.

The methodology relies on protein alignment datasets and deep learning-based classifiers. Protein alignment databases, functional (but still evolving) simulation methods, and a classifier have already been prepared.

The main tasks of the project include:

- Implementing the complete pipeline, including running simulations, training the classifier, and evaluating results on a test dataset.
- Using the pipeline to assess the realism of sequences generated by different simulation tools.

Through this work, we will:

- Learn to establish a simulation protocol.
- Manage and analyze large datasets.
- Gain an understanding of the principles of molecular phylogenetics.
- Compare the performance of various simulation tools.

The classifier is implemented in Python (using PyTorch), and the pipeline will also be developed in Python.

The primary objective of the study is to evaluate the performance of two recently developed sequence simulators: bppseqgen [[3]](https://github.com/BioPP/bppsuite/blob/master/Examples/SequenceSimulation/Tutorial/recipes_for_simulation.pdf) and ESMSimulator [[4]](https://gitlab.in2p3.fr/deelogeny/transverse/simulatewithesm). By training classifiers to distinguish between real and simulated alignments, the project seeks to determine whether the simulations can achieve a level of realism where the classifiers can no longer make this distinction.

---

### Dataset description

For this project, we will use empirical protein alignment datasets derived from vertebrates and plants. These alignments are sourced from the HOGENOM database.
For mammals, we have 35,087 protein alignments and 9,409 nucleotide alignments corresponding to monogenic families. For plants, we have 72,906 protein alignments, for Salmonella we have 14,324 alignments, and for representative genome we have 234370 alignements.

---

## Tools

### Simulators

In this project, simulators act as generators of synthetic protein sequence. We employ two distinct approaches: bppseqgen, a traditional method based on mathematical models of sequence evolution, and ESMSimulator, a novel approach leveraging deep learning techniques. These simulators attempt to recreate the evolutionary processes that shape real protein sequences.
The quality and realism of these simulated sequences are then evaluated with classifiers, allowing us to assess how well each simulator captures the patterns present in natural protein evolution. By comparing the output of these simulators against real protein sequences from our dataset, we can identify their strengths and limitations in reproducing close to real evolutionary signals.

#### ESM simulator [[4]](https://gitlab.in2p3.fr/deelogeny/transverse/simulatewithesm)

ESMSimulator is an innovative approach to protein sequence simulation, using deep learning techniques along with Evolutionary Scale Modeling.
This simulator implements a Gillespie-type algorithm that operates by traversing a phylogenetic tree from its root to its leaves.
The process begins by randomly generating an ancestral sequence at the tree's root. Along each branch, the simulator proposes various amino acid substitutions, and for each proposed change, it computes an ESM score based on a neural network model trained on a vast database of protein sequences.
This score is then compared to the ESM score of the sequence before the proposed substitution. The acceptance or rejection of each substitution is determined probabilistically, with the acceptance probability proportional to the ratio of the new and old ESM scores.
A key advantage of this approach is that the ESM scoring system inherently accounts for potential site interdependencies within the protein sequence, moving beyond the traditional assumption of site independence in evolutionary models.
The neural network's training on protein data allows it to capture patterns of sequence conservation and co-evolution that might be missed by conventional simulation methods.

![img/BioinfoLyon.png](img/fig_simul_esm.png)

#### Bppseqgen simulator [[3]](https://github.com/BioPP/bppsuite/blob/master/Examples/SequenceSimulation/Tutorial/recipes_for_simulation.pdf)

BppSeqGen is a sequence simulator within the Bio++ suite that generates synthetic nucleotide sequences based on specified evolutionary models. It offers a flexible framework for simulating sequence evolution along a given phylogenetic tree. Users can define various parameters such as nucleotide substitution models, branch lengths, rate heterogeneity, and starting sequences.
We used a slightly altered version of [Bppseqgen](https://github.com/BioPP/bppsuite) that works with an empirical alignment and a tree in order to simulate sequences with little to no change along almost the entire tree, and at last introduce variation by using a different model for the leaf nodes and lenghtening the leaf branches.

![img/BioinfoLyon.png](img/fig_simul_bpp.png)

### Classifier [[2]](academic.oup.com/mbe/article/41/1/msad277/7485625)

In this project, classifiers act as judges, evaluating the realism of protein sequences generated by the simulators.
These machine learning models are trained to distinguish between real and simulated sequences. By assessing how effectively the classifiers can differentiate between these two categories, we gain insights into the quality of the simulated data. If a classifier struggles to distinguish real from simulated sequences, it suggests that the simulator is successfully capturing the intricacies of real protein evolution. Conversely, if the classifier can easily differentiate between the two, it indicates that the simulator may be missing key aspects of real evolutionary processes.
This approach provides a quantitative measure of the realism of the simulated data, guiding the refinement of simulation parameters and the development of more accurate tools for generating biologically plausible protein sequences.

![img/BioinfoLyon.png](img/fig_classifieurs.png)

![img/BioinfoLyon.png](img/fig_classifieurs_2.png)

#### Logistic regression [[6]](royalsocietypublishing.org/doi/10.1098/rstb.1989.0106)

Logistic regression is a statistical method used to predict the probability of an event occurring based on a set of predictor variables. In the context of phylogenetic analysis, logistic regression can be used to classify protein sequences as either real or simulated.
It works by modeling the relationship between the predictor variables (features extracted from the sequence, such as amino acid frequencies, evolutionary rates, or phylogenetic tree properties) and the binary outcome (real or simulated). The model estimates the probability of a sequence being real given the values of its predictor variables.
Logistic regression is a relatively simple yet powerful method, making it suitable for initial exploration and comparison of different simulation approaches in phylogenetic studies.

#### DenseMSA [[7]](ieeexplore.ieee.org/document/8099726)

DenseMSA is a deep learning-based classifier specifically designed for protein sequence classification. It leverages a DenseNet architecture, a type of convolutional neural network known for strong feature extraction capabilities.
DenseMSA excels at capturing complex patterns and dependencies within protein sequences.
By incorporating dense connections between layers, DenseMSA enables more efficient information flow and gradient propagation, leading to improved performance compared to traditional convolutional networks. This architecture makes it well-suited for the challenging task of identifying subtle differences between real and simulated evolutionary signals.

#### CNN aa & nt [[8]](sciencedirect.com/science/article/pii/S1877050918308019)

CNN aa & nt (Convolutional Neural Network for amino acid and nucleotide sequences) is a deep learning model designed to classify protein or DNA/RNA sequences based on their sequence features. It utilizes convolutional layers to extract local features from the input sequences, such as motifs, patterns, and conserved regions. These convolutional layers are followed by pooling layers to reduce the dimensionality of the feature maps and fully connected layers to classify the input sequence into predefined categories.
CNN aa & nt models have proven effective in various tasks, including protein function prediction, disease classification, and, our objective, distinguishing between real and simulated sequences.

---

## Environment setup

### Virtual environment

```bash
conda create -name RealisticSimu --file requirements.txt
conda activate RealisticSimu
```

### Apptainer installation

```bash
sudo add-apt-repository -y ppa:apptainer/ppa
sudo apt update
sudo apt install -y apptainer
```

### Bio++ 3.0.0 intallation

Get the bppall.def file

```bash
git clone https://github.com/BioPP/bpp-apptainer.git
```

Building the apptainer image

```bash
cd bpp-apptainer
apptainer build --fakeroot bppall.sif bppall.def
cd ..
```

### SimulateWithESM Installation (in a 'tools' directory)

```bash
mkdir tools
cd tools
git clone https://gitlab.in2p3.fr/deelogeny/transverse/simulatewithesm.git
```

### Classifiers installation (in a 'tools' directory)

uv installation :

```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
```

Classifiers installation :

```bash
git clone https://gitlab.in2p3.fr/jbarnier/simulations-classifiers.git
```

Package installation

```bash
cd simulations-classifiers
uv sync
cd ..
```

### Project installation

```bash
cd ..
git clone http://pedago-service.univ-lyon1.fr:2325/ebergiron/deelogeny-m2.git
cd deelogeny-m2
pip install .
```

### ESMsimulation script modification

The ESM simulator script has been modified to take an input sequence.

```bash
cp script_for_esmsimulator/simulateGillespie.py ../tools/simulatewithesm/src/simulateGillespie.py
```

---

## Pipeline

### Preliminary Analysis

The analysis begins by describing the data we have under 4 variables characterising the alignments; the percentage of identity, the percentage of gap and the length of the sequences in addition to the number of sequences per alignment. In order to visualise all this for each dataset, we generate a histogram which gives us the frequency of each variable. Here is an example for the mammal dataset:

<img src="img/histogram_gap.png" alt="Gap Histogram" width="250"/>  
<img src="img/histogram_identity.png" alt="Identity Histogram" width="250"/>
<img src="img/histogram_length.png" alt="Length Histogram" width="250"/>  
<img src="img/histogram_nseq.png" alt="Number of Sequences Histogram" width="250"/>

Then we clean the data to ensure its quality. This step eliminates:

- Empty alignments.
- Alignments containing sequences that are too long (>10,000 nucleotides or >5,000 amino acids).
- Sequences that are too short (<10 bases).
- Alignments with fewer than five sequences.

After cleaning, two datasets are generated:

- A dataset without ambiguous sites (position in an alignment where the nucleotide or amino acid cannot be definitively identified, often due to sequencing errors or insufficient resolution)
- A dataset without gaps and without ambiguous sites.

### Generation of phylogenetic trees

The next step involves generating phylogenetic trees, which serve as a framework for simulating sequence evolution. These trees represent the evolutionary relationships among sequences, with branch lengths indicating the extent of evolutionary change. Simulating sequences along these trees allows us to model evolutionary processes in a controlled manner.

The phylogenetic trees are generated using FastTree, under the Newick format (nwk).
For DNA alignments, the GTR (General Time Reversible) model is used, which allows different substitution rates for each nucleotide pair and accommodates non-uniform base frequencies.
For protein alignments, the LG (Le and Gascuel) model is used, an empirical model specifically tailored to protein evolution, which incorporates substitution patterns observed across a large set of protein families.

### Generation of simulated sequences

Using the phylogenetic trees, sequence simulations are performed under different evolutionary models to capture a range of realistic scenarios.
Separate simulations are conducted for DNA and protein alignments:

For DNA sequences:

- JC (Jukes-Cantor): Is the simplest model, it assumes equal substitution rates between all nucleotide pairs and equal base frequencies.
- HKY (Hasegawa-Kishino-Yano): Differentiates between transitions (A<->G, C<->T) and transversions (A<->T, A<->C, C<->G, G<->T), allowing for unequal base frequencies.
- GTR (General Time Reversible): Provides the most flexibility by allowing unique substitution rates for each nucleotide pair and accommodating non-uniform base frequencies.
- GTR+G (Gamma): Incorporates rate heterogeneity among sites using a gamma distribution.
- GTR+G+I (Gamma + Invariable Sites): Adds a proportion of invariable sites to the GTR+G model for more realism.
- BPP (bppseqgen): Advanced simulation tool allowing variation in terminal branch lengths, modeling evolutionary processes with high flexibility. [[3]]
- ESM (ESMSimulator): Employs deep learning-based embeddings to simulate sequences with patterns that aim to mimic real-world data.[[4]]

Here the parameters of the GTR model have been determined using a supplied script that extracts and adjusts the parameters from the alignment data.
For the other two critical aspects of the GTR+G+I model, the invariant rate I and the alpha parameter of the gamma distribution were defined according to the values found in the OrthoMam article [[5]].

For protein sequences:

- WAG (Whelan and Goldman): Empirical model tailored to protein evolution, incorporating substitution rates based on amino acid properties like hydrophobicity and polarity.
- BPP (bppseqgen): it's similar to DNA simulations but adapted for protein alignments (also with variations in terminal branch lengths).

Simulations are performed on datasets both with and without gaps to assess the impact of gaps on sequence realism.

### Classification of sequences & Evaluation of classifiers

The final step is to asses the ability of classifiers to distinguish between real and simulated sequences. The classifier is trained on both real and simulated alignments.
The performance of the classifier is evaluated on a test dataset to measure its accuracy in distinguishing real data from simulated data.
By comparing the classifier’s performance across different simulation tools and models, the realism of the simulated alignments is assessed.

### Overall

![img/BioinfoLyon.png](img/fig_pipeline_general_all.png)

---

## Results

### Accuracies comparision

The comparison of models and classifiers can be done with an accuracy heatmap.The columns correspond to the different classifiers used to distinguish simulated sequences from real sequences. Each row corresponds to the evolutionary model used to simulate the simulated sequences.

Accuracy is the percentage of correct predictions out of all predictions made. A high accuracy (close to 1 or 100%) means that the classifier distinguishes simulated sequences from real sequences very well. A low accuracy (close to 0.5 or 50%) indicates a performance close to chance (the classifier does no better than a random prediction).

![img/BioinfoLyon.png](img/results/classif/plot_accuracies.png)

We can see that it is possible to distinguish real sequences from those simulated with the classic evolutionary models: JC69, HK, GTR, GTR + G, GTR + G + I.

The bpp model was run with different branch lengths from 0 to 10 in increments of 0.1. Unfortunately, we found that the bpp simulations didn't work: the simulations gave exactly the same sequences as the alignment. This explains why the simulators can't distinguish the simulated alignments from the real ones.  We believe this is due to an error in the configuration file.

If we focus on the lines corresponding to the classical evolutionary models, we can see that the convolution network is better able to differentiate between real and simulated sequences. This result was expected, as this network takes as input the nucleotide frequency at each site, whereas the other two classifiers take as input the nucleotide frequency for the complete alignment.

However, the classifiers don't seem to distinguish real sequences from simulated sequences for the simplest models: JC69 and HKY, unlike the GTR models. These results are surprising, as these models should theoretically show detectable differences with real sequences, due to their simplicity: these models do not correctly model variations in base frequencies and substitutions among the sites in the alignment.

We also observe that, on these data, the classifier using logistic regression performs more or less the same as the classifier using a dense neural network.

Here are the confusion matrices and training loss plots:

<img src="img/results/classif/mammals_gap_and_ambigless_conf.png" alt="Gap Histogram" width="700"/>

<img src="img/results/classif/mammals_gap_and_ambigless.png" alt="Gap Histogram" width="500"/>

We can see here that loss may still by diminishing: the classifiers might have deserved more training periods.

### Comparison of 3D structures between real and simulated with ESMsimulator proteins.

As part of our project, we tested the ESM simulator because it was said to preserve the structure of proteins, which most simulators don’t. Since this simulator has not been widely tested, we wanted to check if this hypothesis was true.
To do this, we simulated a protein with a well-known structure the alpha-1-antitrypsin. We simulated an alignment with ESM simulator from a real sequence alignment. We then took one sequence from this alignment and predicted the protein structure using SwissModel (Expasy) and tried to measure the difference between the two proteins using RMSD (Root-Mean-Square Deviation) using Yasara.

<img src="img/results/test_3D/fig_3D_superposition.png" alt="Gap Histogram" width="250"/>  
<img src="img/results/test_3D/fig_3D_cote_cote.png" alt="Identity Histogram" width="250"/>

The RMSD is 19 °A which is much higher than 3°A (score when the 2 proteins are considered as identical), it suggest that the two proteins don’t have exactly the same structure. We can see that globally the beta sheets look alike more than the alpha helices between the two proteins.

To quantify the rmsd score obtained with the structural conformation of a simulated sequence with ESM, we did the exactly the same experiment but we simulated the alpha-1-antitrypsin with the JC model.

<img src="img/results/test_3D/modelo3D_ctrl_rmsd.png" alt="Length Histogram" width="250"/>  
<img src="img/results/test_3D/modelo3D_esm_rmsd.png" alt="Number of Sequences Histogram" width="250"/>

We couldn't calculate the RMSD with Yasara because when we infered the 3D structure of the the simulated sequence, we couldn't obtain a full alpha-antitrypsine protein (in orange the sequence simulated with JC and in blue the sequence simulated with ESM).

So ESM simulator does not fully preserve the structure of the protein, but the hypothesis is true to some extent.

### Testing different learning rates for DenseSiteClassifier

We had one last classifier at our disposal : Densesite, which takes as input the amino acid frequency for each site. We tried different learning rates for this classifier. Here, learning rates of 0.005, 0.01 or 0.05 didn't change the classifier's performance : the classifier didn't seen to distinguish between real and simulared sequences.

<img src="img/results/test_learning_rate/mammals_gap_and_ambigless_conf.png" alt="Gap Histogram" width="800"/>

<img src="img/results/test_learning_rate/mammals_gap_and_ambigless_loss.png" alt="Gap Histogram" width="800"/>

## Challenges

Throughout the project, we encountered major difficulties which had an impact on the progress of our research.

At the start of our project, our data was on a remote server with very slow access. For example, it took over 30 minutes to copy 10 alignment files. Data access was late, limiting the progress of our project.

Secondly, the ESM simulator was very long (100 simulation files in 6 days), so we didn't have time to test it.

Another limitation of our project was the lack of data. Among the data we were given, we had to remove empty files and files with too few sequences (<5), as they were not representative. Once these steps had been completed, we kept around 10% of the dataset, or 817 alignments. As this dataset is small, it's possible that the classifiers adapted too much to the data, or didn't have enough data to work properly.

The last limitation of our project is the simulations with bppseqgen: we didn't manage to get this new simulator to work properly: we belatedly realized that the sequences simulated with this simulator were identical to the empirical sequences. We think this is due to an error in the configuration file.

## Conclusion

To take this work further, we could :

- Improve the ESM simulator code. We can optimize GPU utilization by running several simulations at once and minimizing CPU-GPU transfers, so that simulation execution with ESM is more efficient.
- Repeat the classifier trainings several times to see if the classifiers maintain the same performance across trainings.
- Test the pipeline on existing datasets, such as those of Trost et al, rather than introducing new, untested data.

---

## Contributors and Contacts

### Project contributors

For more informations, please contact :

- Pierre-Antoine Navarro (pierre-antoine.navarro@etu.univ-lyon1.fr)
- Jules Travard (jules.travard@etu.univ-lyon1.fr)
- Estelle Bergiron (estelle.bergiron@etu.univ-lyon1.fr)
- Ariane Paradan (ariane.paradan@etu.univ-lyon1.fr)

Master Bioinfo@Lyon

![img/BioinfoLyon.png](img/BioinfoLyon.png)

### Project leaders

- Laurent Guéguen (laurent.gueguen@univ-lyon1.fr)
- Bastien Boussau (bastien.boussau@univ-lyon1.fr)
- Julien Barnier (julien.barnier@univ-lyon1.fr)
- Simon Penel (simon.penel@univ-lyon1.fr)
- Philippe Veber (philippe.veber@univ-lyon1.fr)

### Academinc advisers

 Fabien Duchateau, LIRIS, CNRS (fabien.duchateau@univ-lyon1.fr)

---

## Ressources

- [bppseqgen_setup](https://github.com/BioPP/bpp-documentation/wiki/)
- [bppseqgen_documentation](https://github.com/BioPP/bpp-documentation/wiki/)
- [bppseqgen_examples](https://github.com/BioPP/bppsuite/blob/master/Examples/SequenceSimulation/Tutorial/recipes_for_simulation.pdf)
- [esm_simulator](https://gitlab.in2p3.fr/deelogeny/transverse/simulatewithesm)
- [classifier](https://gitlab.in2p3.fr/jbarnier/simulations-classifiers)

---

## References

- [[1]](https://doi.org/10.1101/2024.06.17.599404) Luca Nesterenko, Luc Blassel, Philippe Veber, Bastien Boussau, and Laurent Jacob. Phylo former : Fast, accurate and versatile phylogenetic reconstruction with deep neural networks. bioRxiv, 2024.
- [[2]](https://doi.org/10.1093/molbev/msad277), Johanna Trost, Julia Haag, Dimitri Hohler, Laurent Jacob, Alexandros Stamatakis, and Bastien Boussau. Simulations of Sequence Evolution: How (Un)realistic They Are and Why. Molecular Biology and Evolution, 41(1): msad277, January 2024.
- [[3]](https://github.com/BioPP/bppsuite/blob/master/Examples/SequenceSimulation/Tutorial/recipes_for_simulation.pdf), Gueguen Laurent, bppseqgen.
- [[4]](https://gitlab.in2p3.fr/deelogeny/transverse/simulatewithesm), Boussau Bastien. ESMSimulator.
- [[5]](https://doi.org/10.1186/1471-2148-7-241),Ranwez V, Delsuc F, Ranwez S, Belkhir K, Tilak MK, Douzery EJ. OrthoMaM: a database of orthologous genomic markers for placental mammal phylogenetics. BMC Evol Biol. 2007 Nov 30;7:241. doi: 10.1186/1471-2148-7-241. PMID: 18053139; PMCID: PMC2249597.
- [[6]](royalsocietypublishing.org/doi/10.1098/rstb.1989.0106) Alan Grafen, The phylogenetic regression, 1989
- [[7]](ieeexplore.ieee.org/document/8099726) G. Huang, Z. Liu, L. Van Der Maaten and K. Q. Weinberger, "Densely Connected Convolutional Networks," 2017
- [[8]](sciencedirect.com/science/article/pii/S1877050918308019) Sakshi Indolia, Anil Kumar Goswami, S.P. Mishra, Pooja Asopa,
  Conceptual Understanding of Convolutional Neural Network- A Deep Learning Approach, 2018
